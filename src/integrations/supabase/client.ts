
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables if available, otherwise use fallback values from .env.example
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://bqbgrjpxufblrgcoxpfk.supabase.co";
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxYmdyanB4dWZibHJnY294cGZrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1Mzk4NzUsImV4cCI6MjA1NzExNTg3NX0.kSryhe5Z4BILp_ss5LpSxanGSvx4HZzZtVzYia4bgik";

// Log initialization
console.info("Inicjalizacja Supabase klienta");

// Sprawdź czy klucze są dostępne
if (!SUPABASE_URL) {
  console.error("Brak konfiguracji SUPABASE_URL - używam wartości domyślnej");
}

if (!SUPABASE_ANON_KEY) {
  console.error("Brak konfiguracji SUPABASE_ANON_KEY - używam wartości domyślnej");
}

console.info("Using URL:", SUPABASE_URL);

try {
  // Import the supabase client like this:
  // import { supabase } from "@/integrations/supabase/client";
  export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY);
  
  // Dla debugowania - zapisz klucze konfiguracyjne w konsoli przeglądarki
  console.info("Supabase URL configured:", SUPABASE_URL ? "YES" : "NO");
  console.info("Supabase ANON KEY configured:", SUPABASE_ANON_KEY ? "YES" : "NO");
} catch (error) {
  console.error("Error creating Supabase client:", error);
  // Create a fallback client that will error gracefully
  // @ts-ignore - We know this will fail, but this prevents the app from crashing on load
  export const supabase = {
    from: () => ({
      select: () => ({
        eq: () => ({
          single: () => Promise.reject(new Error("Supabase client failed to initialize")),
          maybeSingle: () => Promise.reject(new Error("Supabase client failed to initialize")),
        }),
      }),
    }),
  };
}
